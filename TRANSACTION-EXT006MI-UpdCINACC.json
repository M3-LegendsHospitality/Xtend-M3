{"programModules":{"EXT006MI":{"program":"EXT006MI","triggers":{},"transactions":{"UpdCINACC":{"sourceUuid":"ba4282aa-af82-43a4-aa9a-de453f1c4f6b","name":"UpdCINACC","program":"EXT006MI","description":"Cinacc Correction","active":false,"multi":true,"modified":1639549832043,"modifiedBy":"TTEJASWI","outputFields":[{"name":"CONO","description":"company","length":3,"mandatory":false,"type":"N"}],"inputFields":[{"name":"CONO","description":"company","length":3,"mandatory":true,"type":"N"},{"name":"DIVI","description":"division","length":3,"mandatory":true,"type":"A"},{"name":"ANBR","description":"accounting number","length":12,"mandatory":true,"type":"N"},{"name":"SENO","description":"sequence number","length":4,"mandatory":true,"type":"N"},{"name":"AIT1","description":"accounting dimension 1","length":10,"mandatory":false,"type":"A"},{"name":"AIT2","description":"accounting dimension 2","length":10,"mandatory":false,"type":"A"},{"name":"AIT3","description":"accounting dimension 3","length":10,"mandatory":false,"type":"A"},{"name":"AIT4","description":"accounting dimension 4","length":10,"mandatory":false,"type":"A"},{"name":"AIT5","description":"accounting dimension 5","length":10,"mandatory":false,"type":"A"},{"name":"AIT6","description":"accounting dimension 6","length":10,"mandatory":false,"type":"A"},{"name":"AIT7","description":"accounting dimension 7","length":10,"mandatory":false,"type":"A"},{"name":"ERCD","description":"error","length":1,"mandatory":false,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"ba4282aa-af82-43a4-aa9a-de453f1c4f6b":{"uuid":"ba4282aa-af82-43a4-aa9a-de453f1c4f6b","updated":1711007384789,"updatedBy":"XRBADUGU","created":1711005923973,"createdBy":"XRBADUGU","apiVersion":"UNKNOWN","beVersion":"16.0.0.20240116163623.5","language":"GROOVY","codeHash":"06F9B69E7D04B0E71B1BF0F8311A1DE62B55A021430CDC3DE00EE7887E35F177","code":""}}}